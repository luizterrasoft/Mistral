unit URetornoNfe;

interface

uses Classes, SysUtils, principal, auxiliar;

type
  TRetornoNfe = class
  protected
    _separador: String;
    _caminho: String;
    _arquivos: TStringList;
  private
    function getCaminho: String;
    function getSeparador: String;
  public
    arq: TextFile;
    qVenda: TClassAuxiliar;
    qCrediario: TClassAuxiliar;
    constructor Create;
    destructor Destroy; override;
    procedure LerArquivo(nomeArquivo: String); virtual; abstract;
    procedure ListarArquivos(extensao: String);

    property Separador: String    read getSeparador;
    property Caminho: String      read getCaminho;
  end;

implementation

{ TRetornoNfe }

constructor TRetornoNfe.Create;
begin
  _separador := ';';
  _caminho   := 'C:\NATIVA\VENDAS\NFE\REMESSA-PAF\'+FormatDateTime('YYYYMM',frm_principal.x_data_trabalho)+'\';
  _arquivos  := TStringList.Create;
  //******************************
  qVenda := TClassAuxiliar.Create;
  try
    qVenda.Conect('ESTOQUE',nil);
  except
    qVenda.Conect('VENDAS',nil);
  end;
  qVenda.ClearSql;
  //******************************
  qCrediario := TClassAuxiliar.Create;
  qCrediario.Conect('CREDITO',nil);
  qCrediario.ClearSql;
  //******************************
end;

destructor TRetornoNfe.Destroy;
begin
  _arquivos.Free;
  qVenda.Desconect;
  qVenda.Free;
  qCrediario.Desconect;
  qCrediario.Free;
end;

function TRetornoNfe.getCaminho: String;
begin
  Result := _caminho;
end;

function TRetornoNfe.getSeparador: String;
begin
  Result := _separador;
end;

procedure TRetornoNfe.ListarArquivos(extensao: String);
var
  Rec: TSearchRec;
begin
  _arquivos.Clear;
  if (FindFirst(Caminho + '*.'+ extensao, faAnyFile, Rec) = 0) then
    try
      repeat
        _arquivos.Add(Rec.Name);
      until
        FindNext(Rec) <> 0;
    finally
      FindClose(Rec);
    end;
end;

end.
 